// <auto-generated>
// DO NOT EDIT: generated by fsdgencsharp
// </auto-generated>
using System;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Facility.Core.Http;

namespace Faithlife.SurveyApi.v1.Client.Http
{
	[System.CodeDom.Compiler.GeneratedCode("fsdgencsharp", "")]
	public sealed partial class SurveyApiHttpHandler : ServiceHttpHandler
	{
		/// <summary>
		/// Creates the handler.
		/// </summary>
		public SurveyApiHttpHandler(ISurveyApi service, ServiceHttpHandlerSettings settings = null)
			: base(settings)
		{
			if (service == null)
				throw new ArgumentNullException("service");

			m_service = service;
		}

		/// <summary>
		/// Creates the handler.
		/// </summary>
		public SurveyApiHttpHandler(Func<HttpRequestMessage, ISurveyApi> getService, ServiceHttpHandlerSettings settings = null)
			: base(settings)
		{
			if (getService == null)
				throw new ArgumentNullException("getService");

			m_getService = getService;
		}

		/// <summary>
		/// Attempts to handle the HTTP request.
		/// </summary>
		public override async Task<HttpResponseMessage> TryHandleHttpRequestAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken)
		{
			return await AdaptTask(TryHandleCreateSurveyAsync(httpRequest, cancellationToken)).ConfigureAwait(true) ??
				await AdaptTask(TryHandleSubmitSurveyResponseAsync(httpRequest, cancellationToken)).ConfigureAwait(true);
		}

		/// <summary>
		/// Create a survey
		/// </summary>
		public Task<HttpResponseMessage> TryHandleCreateSurveyAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken) =>
			TryHandleServiceMethodAsync(SurveyApiHttpMapping.CreateSurveyMapping, httpRequest, GetService(httpRequest).CreateSurveyAsync, cancellationToken);

		/// <summary>
		/// Submit a response to a survey
		/// </summary>
		public Task<HttpResponseMessage> TryHandleSubmitSurveyResponseAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken) =>
			TryHandleServiceMethodAsync(SurveyApiHttpMapping.SubmitSurveyResponseMapping, httpRequest, GetService(httpRequest).SubmitSurveyResponseAsync, cancellationToken);

		private ISurveyApi GetService(HttpRequestMessage httpRequest) => m_service ?? m_getService(httpRequest);

		readonly ISurveyApi m_service;
		readonly Func<HttpRequestMessage, ISurveyApi> m_getService;
	}
}
